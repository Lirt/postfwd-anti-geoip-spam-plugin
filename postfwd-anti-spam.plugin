#!/usr/bin/perl

# Geo IP
use Geo::IP;
my $gi = Geo::IP->new(GEOIP_MEMORY_CACHE);

# DBI
use DBI;

# Additional libraries for time and files
use IO::Handle;
use Time::Piece;

# Logging
my $log_filename = '/tmp/postfwd_plugin.log';
open( my $log_file_fh, '>>', $log_filename ) or die "ERROR: Could not open file '$log_filename' $!\n";
$log_file_fh->autoflush;

# Enable(1) or disable(0) logging
use constant DEBUG => 1;

sub mylog {
   my ($log_level, @errstr) = @_;
   if (DEBUG) {
      my $date = localtime(time())->strftime('%F %T');
      my $finalStr = "$date $log_level: ";
      foreach my $s (@errstr) {
         if ( length $s ) {
            $finalStr = $finalStr . $s;
         }
      }
      $finalStr = $finalStr . "\n";
      print $log_file_fh $finalStr;
   }   
}

sub mylog_info {
   mylog("INFO[$$]", @_);
}
sub mylog_err {
   mylog("ERROR[$$]", @_);
}
sub mylog_fatal {
   mylog("FATAL[$$]", @_);
   exit -1;
}

# SQL Statements
my $table_name = "postfwd_logins";
my $create_table_st = "CREATE TABLE if NOT EXISTS $table_name (
                       sasl_username varchar(100),
                       ip_address varchar(16),
                       state_code varchar(4),
                       login_count int,
                       last_login timestamp
                    );";
my $drop_table_st = "DROP TABLE $table_name";
my $clear_table_st = "TRUNCATE TABLE $table_name";
my $delete_old_logins = "DELETE FROM $table_name WHERE ( UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(last_login) ) > ?;";
my $check_row_existence_st = "SELECT COUNT(*) FROM $table_name WHERE sasl_username=? AND ip_address=? AND state_code=? LIMIT 1;";
my $check_user_existence_st = "SELECT COUNT(*) FROM $table_name WHERE sasl_username=? LIMIT 1;";
my $insert_st = "INSERT INTO $table_name (sasl_username, ip_address, state_code, login_count, last_login) VALUES (?, ?, ?, 1, ?);";
my $increment_st = "UPDATE $table_name SET login_count=login_count + 1, last_login=? WHERE sasl_username=? AND ip_address=? AND state_code=?;";
my $login_count_from_country_st = "SELECT login_count FROM $table_name WHERE sasl_username=? AND ip_address=? AND state_code=?;";
my $num_countries_logs_st = "SELECT COUNT(DISTINCT state_code) FROM $table_name WHERE sasl_username=?;";

# DB connection - Update values to your DB connection
# my $driver = "Pg"; 
my $driver = "mysql"; 
my $database = "";
my $host = "";
my $port = "";
my $dsn = "DBI:$driver:database=$database;host=$host;port=$port";
my $userid = "";
my $password = "";
my %attr = ( RaiseError => 0, PrintError => 1, AutoCommit => 1 );

# Start log
mylog_info ("Starting postfwd plugin with dsn '$dsn'");

# Connect
my $dbh = DBI->connect($dsn, $userid, $password, \%attr) or mylog_fatal ($DBI::errstr);

# Create table "postfwd_logins" if it does not exists
mylog_info ("Creating table postfwd_logins if it does not exists");
my $create_table_sth = $dbh->prepare($create_table_st) or mylog_fatal ($dbh->errstr);
$create_table_sth->execute() or mylog_fatal ($create_table_sth->errstr);

# Unique country login count limit
my $uniq_country_login_count_limit = 5;

# Flush intervals
my $last_cache_flush = time();
use constant DAY => 86400;
use constant WEEK => 604800;
use constant MONTH => 2419200;
my $flush_interval = DAY;

%postfwd_items_plugin = (

   "incr_client_country_login_count" => sub {

      my(%request) = @_;
      my(%result) = ();
      $result{incr_client_country_login_count} = 0;

      # Test if database connection is still alive
      my $rc = $dbh->ping;
      if ( !$rc ) {
         mylog_info("Database connection dropped (rc=$rc). Reconnecting to database.");
         $dbh = DBI->connect_cached($dsn, $userid, $password, \%attr) or mylog_fatal ($DBI::errstr);
      }

      # Clear old records after flush interval expirates
      if ( ($last_cache_flush + DAY) < time() ) {
         mylog_info ("Removing records which are older than $flush_interval");
         
         my $clear_table_sth = $dbh->prepare($delete_old_logins)  or do { mylog_err($dbh->errstr); return %result; };
         $clear_table_sth->execute($flush_interval)               or do { mylog_err($clear_table_sth->errstr); return %result; };

         mylog_info ("DB cleared!");
         $last_cache_flush = time();
      }

      # Get sasl_username from request
      my $user = $request{sasl_username};
      if ( !length $user || !($user) ) {
         return %result;
      }

      # Get client address
      my $client_ip = $request{client_address};
      if ( !length $client_ip ) {
         return %result;
      }

      # Get country code from GeoIP module
      my $cc = $gi->country_code_by_addr($client_ip);
      if ( !length $cc || !$cc ) {
         mylog_info ("Cannot find country code for IP address [$client_ip]");
         return %result;
      }

      # Check if user with given IP already has record
      my $check_row_existence_sth = $dbh->prepare($check_row_existence_st) or do { mylog_err($dbh->errstr); return %result; };
      if ( !($check_row_existence_sth->execute($user, $client_ip, $cc)) ) {
         mylog_err ($check_row_existence_sth->errstr);
         return %result;
      }

      # Check how many rows was returned (0 or more)
      my $rowCount = $check_row_existence_sth->fetchrow_array;
      if ( $check_row_existence_sth->err ) {
         mylog_err ($check_row_existence_sth->errstr);
         return %result;
      }
      if ( $rowCount == 0 ) {
         # Save new user mail into hash if it does not exists
         mylog_info ("Inserting $user, $client_ip, $cc");
         my $insert_sth = $dbh->prepare($insert_st)                                          or do { mylog_err($dbh->errstr); return %result; };
         $insert_sth->execute($user, $client_ip, $cc, localtime(time())->strftime('%F %T'))  or do { mylog_err($insert_sth->errstr); return %result; };
      }
      else {
         # Increment or initialize login count for user and given IP/country
         mylog_info ("Incrementing $user, $client_ip, $cc");
         my $increment_sth = $dbh->prepare($increment_st)                                       or do { mylog_err($dbh->errstr); return %result; };
         $increment_sth->execute(localtime(time())->strftime('%F %T'), $user, $client_ip, $cc)  or do { mylog_err ($increment_sth->errstr); return %result; };
      }

      # Get number of logins from given IP
      my $login_count_from_country_sth = $dbh->prepare($login_count_from_country_st) or do { mylog_err($dbh->errstr); return %result; };
      if ( !($login_count_from_country_sth->execute($user, $client_ip, $cc)) ) {
         mylog_err ($login_count_from_country_sth->errstr);
         return %result;
      };

      # Fetch number of logins from sth
      $result{incr_client_country_login_count} = $login_count_from_country_sth->fetchrow_array;
      if ( !$result{incr_client_country_login_count} ) {
         if ( $login_count_from_country_sth->err ) {
            mylog_err ($login_count_from_country_sth->errstr);
         }
         return %result;
      }

      mylog_info ("Number of logins from IP $client_ip is $result{incr_client_country_login_count}");

      # Return number of logins from country last logged from
      return %result;

   },

   "client_uniq_country_login_count" => sub {

      my(%request) = @_;
      my(%result) = ();
      $result{client_uniq_country_login_count} = 0;
      
      # Test if database connection is still alive
      my $rc = $dbh->ping;
      if ( !$rc ) {
         mylog_info("Database connection dropped (rc=$rc). Reconnecting to database.");
         $dbh = DBI->connect_cached($dsn, $userid, $password, \%attr) or mylog_fatal ($DBI::errstr);
      }

      # Get sasl_username
      my $user = $request{sasl_username};
      if ( !length $user || !($user) ) {
         return %result;
      }

      # Check if user with given IP already has record
      my $check_user_existence_sth = $dbh->prepare($check_user_existence_st) or do { mylog_err($dbh->errstr); return %result; };
      my $rowCount = $check_user_existence_sth->execute($user);
      if ( $rowCount == 0 ) {
         if ( $check_user_existence_sth->err ) {
            mylog_err ($check_user_existence_sth->errstr);
         }
         return %result;
      }

      # Get number of unique countries from which has user logged in
      my $num_countries_logs_sth = $dbh->prepare($num_countries_logs_st) or do { mylog_err($dbh->errstr); return %result; };
      if ( !($num_countries_logs_sth->execute($user)) ) {
         mylog_err ($num_countries_logs_sth->errstr);
         return %result;
      }

      # Get first row of data
      $result{client_uniq_country_login_count} = $num_countries_logs_sth->fetchrow_array;
      if ( !$result{client_uniq_country_login_count} ) {
         if ( $num_countries_logs_sth->err ) {
            mylog_err ($num_countries_logs_sth->errstr);
         }
         return %result;
      }
      
      # Print unique number of countries that user was logged in from
      if ( $result{client_uniq_country_login_count} > $uniq_country_login_count_limit ) {
         mylog_info ("User $user was logged from more than $uniq_country_login_count_limit countries($result{client_uniq_country_login_count})");
      }
      else {
         mylog_info ("Number of unique countries logged in from user [$user]: $result{client_uniq_country_login_count}");
      }

      # Returns number of countries from which user logged in to an email via sasl
      return %result;

   },

);

1;
