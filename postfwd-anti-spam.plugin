#!/usr/bin/perl

# TODO:
# 1. Test with IPv6 addresses
# 2. Encrypt DB Password or store to file (DBIx)
# 3. Logging with Log4Perl
# 4. Dump database in intervals to supply logs for analyse.

# Anti spam botnet postfwd configuration:
# id=COUNTRY_LOGIN_COUNT ; \
#   sasl_username=~^(.+)$ ; \
#   incr_client_country_login_count != 0 ; \
#   action=dunno
# id=BAN_BOTNET ; \
#   sasl_username=~^(.+)$ ; \
#   client_uniq_country_login_count > 5 ; \
#   action=rate(sasl_username/1/3600/554 Vas ucet bol kompromitovany a zablokovany, prosim zmente si heslo cez webmail (Squirrel alebo Roundcube) akonahle to bude mozne. Your mail account $$sasl_username was compromised. Please change your password immediately after next login.)

#use strict;
#use warnings;

# Geo IP
use Geo::IP;
my $gi = Geo::IP->new(GEOIP_MEMORY_CACHE);

# DBI
use DBI;

# Additional libraries for time and files
use IO::Handle;
use Time::Piece;

# Logging
my $log_filename = '/tmp/postfwd_plugin.log';
open( my $log_file_fh, '>>', $log_filename ) or die "ERROR: Could not open file '$log_filename' $!\n";

# Enable or disable logging
use constant DEBUG => 1;

sub log_info {
   if (DEBUG) {
      my $date = localtime(time())->strftime('%F %T');
      my $str = "$date INFO: ";
      foreach my $s (@_) {
         $str = $str . $s;
      }
      $str = $str . "\n";
      print $log_file_fh $str;
   }
}
sub log_err {
   if (DEBUG) {
      my $date = localtime(time())->strftime('%F %T');
      my $str = "$date ERROR: ";
      foreach my $s (@_) {
         $str = $str . $s;
      }
      $str = $str . "\n";
      print $log_file_fh $str;
   }
}
sub log_fatal {
   if (DEBUG) {
      my $date = localtime(time())->strftime('%F %T');
      my $str = "$date FATAL: ";
      foreach my $s (@_) {
         $str = $str . $s;
      }
      $str = $str . "\n";
      print $log_file_fh $str;
      exit -1;
   }
}

# SQL Statements
my $table_name = "postfwd_logins";
my $create_table_st = "CREATE TABLE if NOT EXISTS $table_name (
                       sasl_username varchar(100),
                       ip_address varchar(16),
                       state_code varchar(4),
                       login_count int,
                       last_login timestamp
                    );";
my $drop_table_st = "DROP TABLE $table_name";
my $clear_table_st = "TRUNCATE TABLE $table_name";
my $delete_old_logins = "DELETE FROM $table_name WHERE ( UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(last_login) ) > ?;";
my $check_row_existence_st = "SELECT * FROM $table_name WHERE sasl_username=? AND ip_address=? AND state_code=?;";
my $check_user_existence_st = "SELECT * FROM $table_name WHERE sasl_username=?;";
my $insert_st = "INSERT INTO $table_name (sasl_username, ip_address, state_code, login_count, last_login) VALUES (?, ?, ?, 1, ?);";
my $increment_st = "UPDATE $table_name SET login_count=login_count + 1, last_login=? WHERE sasl_username=? AND ip_address=? AND state_code=?;";
my $login_count_from_country_st = "SELECT login_count FROM $table_name WHERE sasl_username=? AND ip_address=? AND state_code=?;";
my $num_countries_logs_st = "SELECT COUNT(DISTINCT state_code) FROM $table_name WHERE sasl_username=?;";

# Start log
log_info ("Starting postfwd plugin");

# DB connection - Update values to your DB connection
my $driver = "mysql"; 
my $database = "";
my $host = "";
my $port = "";
my $dsn = "DBI:$driver:database=$database;host=$host;port=$port";
my $userid = "";
my $password = "";

# Connect
my $dbh = DBI->connect($dsn, $userid, $password, { RaiseError => 0, AutoCommit => 1 }) or log_fatal ("$DBI::errstr");
$dbh->{mysql_auto_reconnect} = 1;

# Create table "postfwd_logins" if it does not exists
log_info ("Creating table postfwd_logins if it does not exists");
my $create_table_sth = $dbh->prepare($create_table_st) or log_fatal ("dbh->errstr");
$create_table_sth->execute() or log_fatal ("$create_table_sth->errstr");

# Unique country login count limit
my $uniq_country_login_count_limit = 5;

# Flush intervals
my $last_cache_flush = time();
use constant DAY => 86400;
use constant WEEK => 604800;
use constant MONTH => 2419200;
my $flush_interval = DAY;

%postfwd_items_plugin = (

   "incr_client_country_login_count" => sub {

      my(%request) = @_;
      my(%result) = ();
      $result{incr_client_country_login_count} = 0;

      # Clear user mail and countries login count cache after flush interval expirates
      if ( ($last_cache_flush + DAY) < time() ) {
         log_info ("Removing records which are older than $flush_interval");
         my $clear_table_sth = $dbh->prepare($delete_old_logins) or log_err ("$dbh->errstr");
         $clear_table_sth->execute($flush_interval) or log_err ("$clear_table_sth->errstr");
         log_info ("DB cleared!");
         $last_cache_flush = time();
      }

      # Get sasl_username from request
      my $user = $request{sasl_username};
      if ( !length $user || !($user) ) {
         return %result;
      }

      # Get client address
      my $client_ip = $request{client_address};
      if ( !length $client_ip ) {
         return %result;
      }

      # Get country code from GeoIP module
      my $cc = $gi->country_code_by_addr($client_ip);
      if ( !length $cc || !$cc ) {
         log_info ("Cannot find country code for IP address [$client_ip]");
         return %result;
      }

      # Check if user with given IP already has record
      my $check_row_existence_sth = $dbh->prepare($check_row_existence_st);
      my $rv = $check_row_existence_sth->execute($user, $client_ip, $cc);
      if ( !$rv ) {
         log_err ("$rv->errstr");
         return %result;
      }

      # Check how many rows was returned (0 or more)
      if ( $rv == 0 ) {
         # Save new user mail into hash if it does not exists
         log_info ("Inserting $user, $client_ip, $cc");
         my $insert_sth = $dbh->prepare($insert_st) or log_err ("$dbh->errstr");
         $insert_sth->execute($user, $client_ip, $cc, localtime(time())->strftime('%F %T')) or log_err ("$insert_sth->errstr");
      }
      else {
         # Increment or initialize login count for user and given IP/country
         log_info ("Incrementing $user, $client_ip, $cc");
         my $increment_sth = $dbh->prepare($increment_st) or log_err ("dbh->errstr");
         $increment_sth->execute(localtime(time())->strftime('%F %T'), $user, $client_ip, $cc) or log_err ("$increment_sth->errstr");
      }

      # Get number of logins from given IP
      my $login_count_from_country_sth = $dbh->prepare($login_count_from_country_st) or log_err ("$dbh->errstr");
      $login_count_from_country_sth->execute($user, $client_ip, $cc) or log_err ("$login_count_from_country_sth->errstr");

      $result{incr_client_country_login_count} = $login_count_from_country_sth->fetchrow_array;
      log_info ("Number of logins from IP $client_ip is $result{incr_client_country_login_count}");

      # Return number of logins from country last logged from
      return %result;

   },

   "client_uniq_country_login_count" => sub {

      my(%request) = @_;
      my(%result) = ();
      $result{client_uniq_country_login_count} = 0;
      
      # Get sasl_username
      my $user = $request{sasl_username};
      if ( !length $user || !($user) ) {
         return %result;
      }

      # Check if user with given IP already has record
      my $check_user_existence_sth = $dbh->prepare($check_user_existence_st);
      my $rv = $check_user_existence_sth->execute($user);
      if ( !$rv ) {
         log_err ("$check_user_existence_sth->errstr");
         return %result;
      }

      # Get number of unique countries from which has user logged
      my $num_countries_logs_sth = $dbh->prepare($num_countries_logs_st);
      if ( !($num_countries_logs_sth->execute($user)) ) {
         log_err ("$num_countries_logs_sth->errstr");
         return %result;
      }

      $result{client_uniq_country_login_count} = $num_countries_logs_sth->fetchrow_array;
      
      if ( $result{client_uniq_country_login_count} > $uniq_country_login_count_limit ) {
         log_info ("User $user is logged from more than $uniq_country_login_count_limit countries($result{client_uniq_country_login_count})");
      }
      else {
         log_info ("Number of unique countries logged in from user [$user]: $result{client_uniq_country_login_count}");
      }

      # Returns number of countries from which user logged in to an email via sasl
      return %result;

   },

);

1;
